// Predefined symbols and macros -*- C++ -*-

// Copyright (C) 1997, 1998, 1999, 2000, 2001 Free Software Foundation, Inc.
//
// This file is part of the GNU ISO C++ Library.  This library is free
// software; you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the
// Free Software Foundation; either version 2, or (at your option)
// any later version.

// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License along
// with this library; see the file COPYING.  If not, write to the Free
// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,
// USA.

// As a special exception, you may use this file as part of a free software
// library without restriction.  Specifically, if other files instantiate
// templates or use macros or inline functions from this file, or you compile
// this file and link it with other files to produce an executable, this
// file does not by itself cause the resulting executable to be covered by
// the GNU General Public License.  This exception does not however
// invalidate any other reasons why the executable file might be covered by
// the GNU General Public License.

#ifndef _CPP_CPPCONFIG
#define _CPP_CPPCONFIG 1

// Pick up any OS-specific definitions.
#include <bits/os_defines.h>

// The current version of the C++ library in compressed ISO date format.
#define __GLIBCPP__ 20010301

// This is necessary until GCC supports separate template
// compilation.  
#define _GLIBCPP_NO_TEMPLATE_EXPORT 1

// This is a hack around not having either pre-compiled headers or
// export compilation. If defined, the io, string, and valarray
// headers will include all the necessary bits. If not defined, the
// implementation optimizes the headers for the most commonly-used
// types. For the io library, this means that larger, out-of-line
// member functions are only declared, and definitions are not parsed
// by the compiler, but instead instantiated into the library binary.
#define _GLIBCPP_FULLY_COMPLIANT_HEADERS 1

// To enable older, ARM-style iostreams and other anachronisms use this.
//#define _GLIBCPP_DEPRECATED 1

// Use corrected code from the committee library group's issues list.
#define _GLIBCPP_RESOLVE_LIB_DEFECTS 1


// From SGI's stl_config.h; generic settings and user hooks (_NOTHREADS).
#if defined(_PTHREADS) && !defined(_NOTHREADS)
#    define __STL_PTHREADS
#endif
#if defined(_UITHREADS) && !defined(_PTHREADS) && !defined(_NOTHREADS)
#    define __STL_UITHREADS
#endif

// Also from SGI's stl_config.h; settings for GCC.
#define __STL_HAS_WCHAR_T
#define __STL_MEMBER_TEMPLATES
#define __STL_MEMBER_TEMPLATE_CLASSES
#define __STL_TEMPLATE_FRIENDS
#define __STL_CLASS_PARTIAL_SPECIALIZATION 
#define __STL_PARTIAL_SPECIALIZATION_SYNTAX 
#define __STL_FUNCTION_TMPL_PARTIAL_ORDER
#define __STL_EXPLICIT_FUNCTION_TMPL_ARGS
#define __SGI_STL_USE_AUTO_PTR_CONVERSIONS
#define __STL_HAS_NAMESPACES
#define __STL_USE_NAMESPACES
#ifdef __EXCEPTIONS
#  define __STL_USE_EXCEPTIONS
#  define __STL_TRY try
#  define __STL_CATCH_ALL catch(...)
#  define __STL_THROW(x) throw x
#  define __STL_RETHROW throw
#  define __STL_NOTHROW throw()
#  define __STL_UNWIND(action) catch(...) { action; throw; }
#else
#  define __STL_TRY 
#  define __STL_CATCH_ALL if (false)
#  define __STL_THROW(x) 
#  define __STL_RETHROW 
#  define __STL_NOTHROW 
#  define __STL_UNWIND(action) 
#endif
#define __STL_THROW_RANGE_ERRORS 
#define __STL_CAN_THROW_RANGE_ERRORS 
#define __STL_USE_STD_ALLOCATORS 
#define __USE_MALLOC // As the "underlying allocator"
//#define __STL_USE_NEW_IOSTREAMS //990209 bkoz--use standard .h includes.
#ifdef _REENTRANT
#  define __STL_THREADS
#endif
#ifdef _PTHREADS
#  define __STL_PTHREADS
#endif
#ifndef __STRICT_ANSI__
#  define __STL_LONG_LONG
#endif
//#if (__GNUC__ < 2) || (__GNUC__ == 2 && __GNUC_MINOR__ < 95)
#  define __STL_NO_FUNCTION_PTR_IN_CLASS_TEMPLATE
//#endif

// Also from SGI's stl_config.h; settings for GCC.
// Mingw32, GCC compiler using the Microsoft C runtime
#if defined(__MINGW32__)
#  define __STL_NO_DRAND48
#  ifdef _MT
#    define __STL_WIN32THREADS
#  endif
#endif

// Cygwin32, GCC compiler on MS Windows
#if defined(__CYGWIN__)
#  define __STL_NO_DRAND48
#endif

// The old stl_config.h would use the above settings in chains of
// if/then/else tests to define the following.
#define __STL_DEPENDENT_DEFAULT_TMPL(_Tp) = _Tp
#define __STL_TEMPLATE
#define __STL_NULL_TMPL_ARGS <>
#define __STL_TEMPLATE_NULL template<>
#define __STL_DEFAULT_ALLOCATOR(T) allocator< T >

#define __STL_USE_NAMESPACES
#define __STD std
#define __STL_BEGIN_NAMESPACE namespace std {
#define __STL_END_NAMESPACE }
#define __STL_USE_NAMESPACE_FOR_RELOPS
#define __STL_BEGIN_RELOPS_NAMESPACE namespace std { namespace rel_ops {
#define __STL_END_RELOPS_NAMESPACE } }
#define __STD_RELOPS std::rel_ops
#define __STD_QUALIFIER std::


#ifdef __STL_ASSERTIONS
# include <stdio.h>
# define __stl_assert(expr) \
    if (!(expr)) { fprintf(stderr, "%s:%d STL assertion failure: %s\n", \
                          __FILE__, __LINE__, # expr); abort(); }
#else
# define __stl_assert(expr)
#endif

#if defined(__STL_WIN32THREADS) || defined(__STL_SGI_THREADS) \
    || defined(__STL_PTHREADS)  || defined(__STL_UITHREADS)
#   define __STL_THREADS
#   define __STL_VOLATILE volatile
#else
#   define __STL_VOLATILE
#endif

#if defined(__STL_CLASS_PARTIAL_SPECIALIZATION) \
    && defined(__STL_MEMBER_TEMPLATES) \
    && !defined(_STL_NO_CONCEPT_CHECKS)
#  define __STL_USE_CONCEPT_CHECKS
#endif


// End of prewritten config; the discovered settings follow.


